// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int          @default(autoincrement())
  user_id    String       @default(uuid())
  email      String       @db.VarChar(255)
  pasword    String       @db.VarChar(255)
  firstname  String       @db.VarChar(255)
  lastname   String       @db.VarChar(255)
  telephone  String       @db.VarChar(50)
  created_at DateTime     @default(now())
  created_by Int?
  updated_at DateTime?    @updatedAt
  updated_by Int?
  UserOnRole UserOnRole[]

  @@id([id])
  @@map("user")
}

model UserOnRole {
  id      Int   @default(autoincrement())
  user_id Int?
  role_id Int?
  User    User? @relation(references: [id], fields: [user_id], onDelete: Cascade)
  Role    Role? @relation(references: [id], fields: [role_id], onDelete: Cascade)

  @@id([id])
  @@map("user_on_role")
}

model Role {
  id            Int          @default(autoincrement())
  name          String       @db.VarChar(255)
  role_shortkey String       @db.VarChar(10)
  UserOnRole    UserOnRole[]

  @@id([id])
  @@map("role")
}

// model TransactionPayment {
//   id                Int                @default(autoincrement())
//   transactionId     String             @db.VarChar(255)
//   PaymentCheckPoint PaymentCheckPoint?
//   createdAt         DateTime           @default(now())
//   createBy          Int?
//   updatedAt         DateTime?          @updatedAt
//   updatedBy         Int?

//   @@id([id])
//   @@map("transaction_payment")
// }

// model PaymentCheckPoint {
//   id                   Int                @default(autoincrement())
//   price                Float
//   transactionPaymentId Int                @unique
//   TransactionPayment   TransactionPayment @relation(fields: [transactionPaymentId], references: [id])
//   createdAt            DateTime           @default(now())
//   createBy             Int?
//   updatedAt            DateTime?          @updatedAt
//   updatedBy            Int?

//   @@id([id])
//   @@map("payment_check_point")
// }
