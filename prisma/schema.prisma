// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id         Int          @default(autoincrement())
  user_id    String       @default(uuid())
  email      String       @db.VarChar(255)
  password   String       @db.VarChar(255)
  firstname  String?      @db.VarChar(255)
  lastname   String?      @db.VarChar(255)
  telephone  String?      @db.VarChar(50)
  created_at DateTime     @default(now())
  created_by Int?
  updated_at DateTime?    @updatedAt
  updated_by Int?
  UserOnRole UserOnRole[]

  @@id([id])
  @@map("users")
}

model UserOnRole {
  id      Int    @default(autoincrement())
  user_id Int?
  role_id Int?
  Users   Users? @relation(references: [id], fields: [user_id], onDelete: Cascade)
  Role    Role?  @relation(references: [id], fields: [role_id], onDelete: Cascade)

  @@id([id])
  @@map("user_on_role")
}

model Role {
  id            Int          @default(autoincrement())
  name          String       @unique @db.VarChar(255)
  role_shortkey String       @unique @db.VarChar(10)
  UserOnRole    UserOnRole[]

  @@id([id])
  @@map("role")
}

model Products {
  id                Int         @default(autoincrement())
  product_name      String      @db.Text
  product_per_price Float
  created_at        DateTime    @default(now())
  created_by        Int?
  updated_at        DateTime?   @updatedAt
  updated_by        Int?
  categories_id     Int?
  Categories        Categories? @relation(fields: [categories_id], references: [id], onDelete: SetNull)
  Brand             Brand?      @relation(fields: [brand_id], references: [id])
  brand_id          Int?
  Stock             Stock?

  @@id([id])
  @@map("products")
}

model Stock {
  id            Int       @default(autoincrement())
  stock_balance Float?
  product_id    Int?      @unique
  Products      Products? @relation(fields: [product_id], references: [id], onDelete: SetNull)
  created_at    DateTime  @default(now())
  created_by    Int?
  updated_at    DateTime? @updatedAt
  updated_by    Int?

  @@id([id])
  @@map("stock")
}

model Brand {
  id         Int        @default(autoincrement())
  brand_name String     @db.VarChar(255)
  Products   Products[]

  @@id([id])
  @@map("brand")
}

model ProductsUnit {
  id        Int    @default(autoincrement())
  unit_name String @db.VarChar(255)

  @@id([id])
  @@map("products_unit")
}

model Categories {
  id              Int        @default(autoincrement())
  categories_name String     @db.Text
  Products        Products[]

  @@id([id])
}

// model TransactionPayment {
//   id                Int                @default(autoincrement())
//   transactionId     String             @db.VarChar(255)
//   PaymentCheckPoint PaymentCheckPoint?
//   createdAt         DateTime           @default(now())
//   createBy          Int?
//   updatedAt         DateTime?          @updatedAt
//   updatedBy         Int?

//   @@id([id])
//   @@map("transaction_payment")
// }

// model PaymentCheckPoint {
//   id                   Int                @default(autoincrement())
//   price                Float
//   transactionPaymentId Int                @unique
//   TransactionPayment   TransactionPayment @relation(fields: [transactionPaymentId], references: [id])
//   createdAt            DateTime           @default(now())
//   createBy             Int?
//   updatedAt            DateTime?          @updatedAt
//   updatedBy            Int?

//   @@id([id])
//   @@map("payment_check_point")
// }
